#!/bin/bash

#===[ Constants ]===
PROJECT_NAME="DnsProxy"
BASE_DIR="/usr/local/bin/DnsProxy"
CONFIG_DIR="/etc/coredns/conf.d"
HOSTS_DIR="/etc/unblocker"

#===[ Colors ]===
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
CYAN='\033[0;36m'
RESET='\033[0m'

#===[ Helpers ]===
function clear_and_header() {
    clear
    echo -e "${CYAN}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
    echo -e "‚ïë    üåê  DnsProxy Manager      ‚ïë"
    echo -e "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${RESET}"
    echo
}

function service_status() {
    echo -e "${YELLOW}üîç Service Status:${RESET}"
    systemctl is-active --quiet coredns && echo -e "üü¢ CoreDNS: ${GREEN}Running${RESET}" || echo -e "üî¥ CoreDNS: ${RED}Stopped${RESET}"
    pgrep sniproxy &>/dev/null && echo -e "üü¢ SNIProxy: ${GREEN}Running${RESET}" || echo -e "üî¥ SNIProxy: ${RED}Stopped${RESET}"
    echo
}


function main_menu() {
    while true; do
        clear_and_header
        service_status
        echo -e "${YELLOW}1) üì• Install"
        echo -e "2) ‚ùå Uninstall"
        echo -e "3) üìÇ Domains"
        echo -e "4) üö™ Exit${RESET}"
        echo
        read -p "Choose an option: " choice
        case "$choice" in
            1) "$BASE_DIR/Install.sh" ;;
            2) "$BASE_DIR/Uninstall.sh" ;;
            3) domains_menu ;;
            4) exit 0 ;;
            *) echo -e "${RED}Invalid option.${RESET}"; sleep 1 ;;
        esac
    done
}

function domains_menu() {
    while true; do
        clear_and_header
        echo -e "${YELLOW}üìÇ Domains Menu:${RESET}"
        echo -e "1) üìÉ List current domains"
        echo -e "2) ‚ûï Add a new service"
        echo -e "3) üóëÔ∏è  Remove an existing service"
        echo -e "4) üìù View a service's host file"
        echo -e "5) üîô Back${RESET}"
        echo
        read -p "Choose an option: " dom_choice
        case "$dom_choice" in
            1)
                echo -e "${CYAN}Existing services:${RESET}"
                local found=false
                for file in "$CONFIG_DIR"/*.conf; do
                    if [ -e "$file" ]; then
                        basename "$file" .conf
                        found=true
                    fi
                done
                if ! $found; then
                    echo -e "${YELLOW}(No services found)${RESET}"
                fi
                echo
                read -p "Press enter to return..." ;;
            2)
                # Corrected logic to add a new service
                echo -ne "${YELLOW}Enter the service name to add (e.g., spotify, gemini): ${RESET}"
                read service_name
                echo -e "---"
                echo -e "${YELLOW}Select a configuration method:${RESET}"
                echo -e "1) Automatic"
                echo -e "2) Manual"
                read -p "Enter your choice (1 or 2): " config_choice

                case "$config_choice" in
                    1) method="auto" ;;
                    2) method="manual" ;;
                    *) echo -e "${RED}Invalid choice. Returning to menu.${RESET}"; sleep 2; continue ;;
                esac

                # Pass both variables to the AddDomain.sh script
                "$BASE_DIR/AddDomain.sh" "$service_name" "$method"
                read -p "Press enter to return..." ;;
            3)
                # Corrected logic to remove a service
                echo -ne "${YELLOW}Enter the service name to remove (e.g., gemini, spotify): ${RESET}"
                read service_name
                local conf_file="$CONFIG_DIR/$service_name.conf"
                local hosts_file="$HOSTS_DIR/$service_name.hosts"

                if [ -f "$conf_file" ] || [ -f "$hosts_file" ]; then
                    sudo rm -f "$conf_file" "$hosts_file"
                    echo -e "${GREEN}‚úÖ Removed configuration files for '$service_name'${RESET}"
                    sudo systemctl restart coredns
                    echo -e "${CYAN}CoreDNS service restarted.${RESET}"
                else
                    echo -e "${RED}‚ùå No configuration found for '$service_name'.${RESET}"
                fi
                read -p "Press enter to return..." ;;
            4)
                # Option to view the contents of a hosts file
                echo -ne "${YELLOW}Enter the service name to view (e.g., gemini, spotify): ${RESET}"
                read service_name
                local hosts_file="$HOSTS_DIR/$service_name.hosts"

                if [ -f "$hosts_file" ]; then
                    echo -e "${CYAN}--- Contents of $hosts_file ---${RESET}"
                    cat "$hosts_file"
                    echo -e "${CYAN}-------------------------------${RESET}"
                else
                    echo -e "${RED}‚ùå Hosts file not found for '$service_name'.${RESET}"
                fi
                read -p "Press enter to return..." ;;
            5) return ;;
            *) echo -e "${RED}Invalid option.${RESET}"; sleep 1 ;;
        esac
    done
}

main_menu
